using System;
using System.Web.Http;
using InspectionWeb.WebSupport;
using InspectionWeb.WebSupport.WebApi;
using System.Diagnostics;
using InspectionWeb.Models;
using InspectionWeb.Services.Interface;
using System.Web.Mvc;

namespace InspectionWeb.Controllers
{
    public class ServiceController : ApiController
    {
        private IAbnormalDefinitionService abnormalDefinitionService;
        private IAbnormalRecordService abnormalRecordService;
        private IExhibitionItemService exhibitionItemService;
        private IReportDeviceService reportDeviceService;
        private IReportSourceService reportSourceService;

        public ServiceController(IAbnormalDefinitionService abnormalDefinitionService, IExhibitionItemService exhibitionItemService, 
            IAbnormalRecordService abnormalRecordService, IReportDeviceService reportDeviceService, IReportSourceService reportSourceService)
        {
            this.abnormalDefinitionService = abnormalDefinitionService;
            this.abnormalRecordService = abnormalRecordService;
            this.exhibitionItemService = exhibitionItemService;
            this.reportDeviceService = reportDeviceService;
            this.reportSourceService = reportSourceService;
        }

        /*
        // GET api/values
        public IEnumerable<string> Get()
        {
            return new string[] { "value1", "value2" };
        }

        // GET api/values/5
        public string Get(int id)
        {
            return "value";
        }

        // PUT api/values/5
        public void Put(int id, [FromBody]string value)
        {
        }

        // DELETE api/values/5
        public void Delete(int id)
        {
        }
        */

        // GET api/AbnormalDefinitionList
        public IHttpActionResult AbnormalDefinitionList()
        {
            var result = -1;
            try
            {
                var abnormalDefinitionList = this.abnormalDefinitionService.GetAll();
                result = 0;
                var data = new { result = result, data = abnormalDefinitionList };
                return Json(data);
            }
            catch (Exception e)
            {
            }
            return Json(new { result = result, JsonRequestBehavior.AllowGet });
        }

        // GET api/AbnormalSourceList
        public ActionResult AbnormalSourceList()
        {

        }

        // POST api/service/AbnormalAutoReport
        /**
         * support
         * Content-Type: application/x-www-form-urlencoded;charset=utf-8
         * Content-Type: application/json;charset=utf-8
         */
        [HttpPost]
        public void AbnormalAutoReport([FromBody]AutoReportPost autoReportPost)
        {
            if (autoReportPost != null)
            {
                if (!String.IsNullOrEmpty(autoReportPost.deviceCode))
                {
                    // get data by device code
                    var reportDevice = this.reportDeviceService.GetByDeviceCode(autoReportPost.deviceCode);
                    // get data by abnormal code
                    var abnormalDefinition = this.abnormalDefinitionService.GetByAbnormalCode(autoReportPost.abnormalCode);
                    if (reportDevice != null && abnormalDefinition != null)
                    {
                        var abnormalRecord = new abnormalRecord();
                        abnormalRecord.recordId = IdGenerator.GetId("abnormalRecord");
                        abnormalRecord.itemId = reportDevice.itemId;
                        abnormalRecord.sourceId = reportDevice.sourceId;
                        abnormalRecord.abnormalId = abnormalDefinition.abnormalId;
                        abnormalRecord.deviceId = reportDevice.deviceId;
                        abnormalRecord.description = autoReportPost.description;
                        abnormalRecord.isClose = 0;
                        // get current time
                        DateTime now = DateTime.Now;
                        abnormalRecord.happenedTime = now;
                        abnormalRecord.createTime = now;
                        abnormalRecord.lastUpdateTime = now;

                        this.abnormalRecordService.Create(abnormalRecord);
                    }
                }
            }
        }

        // POST api/AbnormalUserReport
        [HttpPost]
        public void AbnormalUserReport([FromBody]UserReportPost userReportPost)
        {
            if (userReportPost != null)
            {
                if (!String.IsNullOrEmpty(userReportPost.itemCode))
                {
                    // get item data 
                    var exhibitionItem = this.exhibitionItemService.GetByItemCode(userReportPost.itemCode);
                    if (exhibitionItem != null)
                    {

                        var abnormalRecord = new abnormalRecord();
                        abnormalRecord.recordId = IdGenerator.GetId("abnormalRecord");
                        // exhibition item
                        abnormalRecord.itemId = exhibitionItem.itemId;
                        // unable to determine abnormal situation
                        var reportSource = this.reportSourceService.GetBySourceCode("06");
                        abnormalRecord.sourceId = reportSource.sourceId;
                        abnormalRecord.abnormalId = "";

                        var reportDevice = this.reportDeviceService.GetByExhibitionItemId(exhibitionItem.itemId);
                        if (exhibitionItem != null)
                        {
                            abnormalRecord.deviceId = reportDevice.deviceId;
                        }
                        abnormalRecord.description = String.Format("使用者 app 回報：{0}, \n\r說明：{1}", userReportPost.email + userReportPost.description);
                        abnormalRecord.isClose = 0;
                        // get current time
                        DateTime now = DateTime.Now;
                        abnormalRecord.happenedTime = now;
                        abnormalRecord.createTime = now;
                        abnormalRecord.lastUpdateTime = now;

                        this.abnormalRecordService.Create(abnormalRecord);
                    }
                }
            }
        }

        // GET api/AbnormalStatus
        public void AbnormalStatus([FromUri]string recordId)
        {
            if (!String.IsNullOrEmpty(recordId))
            {
                Debug.WriteLine(recordId);
            }
        }

        // GET api/CheckSoftwareVersion
        public void CheckSoftwareVersion([FromUri]string softwareCode)
        {
            if (!String.IsNullOrEmpty(softwareCode))
            {
                Debug.WriteLine(softwareCode);
            }
        }

        // POST api/DevicePeriodReport
        [HttpPost]
        public void DevicePeriodReport([FromBody]string deviceCode)
        {

        }

    }
}
