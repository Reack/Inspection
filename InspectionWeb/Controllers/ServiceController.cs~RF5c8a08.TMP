using System;
using System.Web.Http;
using InspectionWeb.WebSupport;
using System.Diagnostics;
using InspectionWeb.Models;
using InspectionWeb.Services.Interface;

namespace InspectionWeb.Controllers
{
    public class ServiceController : ApiController
    {
        private IAbnormalRecordService abnormalRecordService;
        private IReportDeviceService reportDeviceService;

        public ServiceController(IAbnormalRecordService abnormalRecordService, IReportDeviceService reportDeviceService)
        {
            this.abnormalRecordService = abnormalRecordService;
            this.reportDeviceService = reportDeviceService;
        }

        /*
        // GET api/values
        public IEnumerable<string> Get()
        {
            return new string[] { "value1", "value2" };
        }

        // GET api/values/5
        public string Get(int id)
        {
            return "value";
        }

        // PUT api/values/5
        public void Put(int id, [FromBody]string value)
        {
        }

        // DELETE api/values/5
        public void Delete(int id)
        {
        }
        */

        // GET api/AbnormalDefinitionList
        public void AbnormalDefinitionList()
        {
            
        }

        // GET api/AbnormalSourceList
        public void AbnormalSourceList()
        {

        }

        // POST api/service/AbnormalAutoReport
        /**
         * support
         * Content-Type: application/x-www-form-urlencoded;charset=utf-8
         * Content-Type: application/json;charset=utf-8
         */
        [HttpPost]
        public void AbnormalAutoReport([FromBody]AbnormalReportPost abnormalReportPost)
        {
            if (abnormalReportPost != null)
            {
                if (!String.IsNullOrEmpty(abnormalReportPost.deviceCode))
                {
                    var reportDevice = this.reportDeviceService.GetByDeviceCode(abnormalReportPost.deviceCode);

                    var abnormalRecord = new abnormalRecord();
                    abnormalRecord.abnormalId = IdGenerator.GetId("abnormalRecord");
                    abnormalRecord.
                    abnormalRecord.createTime = DateTime.Now;
                }
            }
        }

        // POST api/AbnormalUserReport
        [HttpPost]
        public void AbnormalUserReport([FromBody]AbnormalReportPost abnormalReportPost)
        {

        }

        // GET api/AbnormalStatus
        public void AbnormalStatus([FromUri]string recordId)
        {
            if (!String.IsNullOrEmpty(recordId))
            {
                Debug.WriteLine(recordId);
            }
        }

        // GET api/CheckSoftwareVersion
        public void CheckSoftwareVersion([FromUri]string softwareCode)
        {
            if (!String.IsNullOrEmpty(softwareCode))
            {
                Debug.WriteLine(softwareCode);
            }
        }

        // POST api/DevicePeriodReport
        [HttpPost]
        public void DevicePeriodReport([FromBody]string deviceCode)
        {

        }

    }
}
